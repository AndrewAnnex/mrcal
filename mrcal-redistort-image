#!/usr/bin/python3

r'''Remaps a captured image into another camera model

SYNOPSIS

  $ mrcal-redistort-image
      --from pinhole.cameramodel
      --to fisheye.cameramodel
      image.png
  Wrote image-remapped.png

This tool takes an image captured by one camera model, and transforms it into
another model. The two sets of intrinsics are always used. One way in which this
is useful is for validation of the rotation in the extrinsics: if the rotation
and intrinsics are correct, then observations of infinitely-far-away objects in
the remapped image would match the observations made by the second camera. This
second image isn't used by this tool, but the user can compare it against the
reampped image generated by this tool.

This tool always ignores the translation component of the extrinsics, and
ignores the rotation as well if --ignore-rotation.

The output goes into the same directory as the input image, with a slightly
different filename: image.png -> image-remapped.png
This tool will refuse to overwrite any existing files unless --force.

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--from',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The cameramodel must be an existing readable file, but got '{}'".format(f)),
                        required=True,
                        help='''Camera model for the input image. Assumed to be mrcal native, Unless the name
                        is xxx.cahvor, in which case the cahvor format is
                        used.''')

    parser.add_argument('--to',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The cameramodel must be an existing readable file, but got '{}'".format(f)),
                        required=True,
                        help='''Camera model for the output image. Assumed to be mrcal native, Unless the
                        name is xxx.cahvor, in which case the cahvor format is
                        assumed''')

    parser.add_argument('--ignore-rotation',
                        action='store_true',
                        help='''By default the relative camera rotation is used in the transformation. If we
                        want to use the intrinsics ONLY, pass --ignore-rotation''')

    parser.add_argument('--force', '-f',
                        action='store_true',
                        default=False,
                        help='''By default I don't overwrite existing files. Pass --force to overwrite them
                        without complaint''')

    parser.add_argument('image',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The images must be readable files, but got '{}'".format(f)),
                        nargs='+',
                        help='''Images to remap''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README






import numpy as np
import numpysane as nps
import cv2

import mrcal


def target_image_filename(f):
    m = re.match("(.*)\.([a-z][a-z][a-z])$", f, flags=re.I)
    if not m:
        raise Exception("imagefile must end in .xxx where 'xxx' is some image extension. Instead got '{}'".format(f))

    return "{}-remapped.{}".format(m.group(1),m.group(2))



if not args.force:
    for imagefile in args.image:
        f = target_image_filename(imagefile)
        if os.path.isfile(f):
            sys.stderr.write("Target image '{}' already exists. Doing nothing, and giving up. Pass -f to overwrite.\n".format(f))
            sys.exit(1)


args_from  = getattr(args, 'from')
model_from = mrcal.cameramodel(args_from)
model_to   = mrcal.cameramodel(args.to)


image1 = mrcal.redistort_image( # 'from' is reserved in python
                                getattr(args, 'from'), getattr(args, 'to'),
                                args.image,
                                ignore_rotation = args.ignore_rotation)

for i in range(len(args.image)):
    im = image1[i]
    f  = target_image_filename(args.image[i])
    cv2.imwrite(f, im)
    sys.stderr.write("Wrote {}\n".format(f))


