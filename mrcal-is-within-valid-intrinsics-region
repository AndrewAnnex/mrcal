#!/usr/bin/python3

r'''Reports which input points lie within the valid-intrinsics region

SYNOPSIS

  $ < points-in.vnl
    mrcal-is-within-valid-intrinsics-region
      camera.cameramodel
    > points-annotated.vnl

mrcal camera models may have an estimate of the region of the imager where the
intrinsics are trustworthy (originally computed with a low-enough error and
uncertainty). When using a model, we may want to process points that fall
outside of this region differently from points that fall within this region.
This tool augments an incoming x-y vnlog with a new column, indicating whether
each point does or does not fall within the region.

The input data comes in on standard input, and the output data is written to
standard output. Both are vnlog data: human-readable text with 2 columns: x and
y pixel coords. Comments are allowed, and start with the '#' character.

'''

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('model',
                        type=str,
                        help='''Camera model.''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README





import numpy as np
import numpysane as nps

import mrcal

model = mrcal.cameramodel(args.model)
if model.valid_intrinsics_region() is None:
    print("The given model has no valid-intrinsics region defined!",
          file=sys.stderr)
    sys.exit(1)

q = nps.atleast_dims(np.loadtxt(sys.stdin), -2)
mask = mrcal.is_within_valid_intrinsics_region(q, model)

np.savetxt(sys.stdout,
           nps.glue(q, nps.transpose(mask), axis=-1),
           fmt='%f %f %d', header='x y is_within_valid_intrinsics_region')
