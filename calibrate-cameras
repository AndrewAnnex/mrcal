#!/usr/bin/python2

r'''Calibrate some synchronized cameras

Synopsis:

  $ calibrate-cameras --focal 2000 --imagersize 2448 2048 --outdir /tmp --object-spacing 0.01 --object-width-n 10 '/tmp/left*.png' '/tmp/right*.png'


  ... lots of output as the solve runs ...
  done with DISTORTION_CAHVOR, optimizing DISTORTIONS again
  Wrote /tmp/camera0-0.cahvor
  Wrote /tmp/camera0-1.cahvor


This tools uses the generic mrcal platform to solve this common specific
problem. Run --help for the list of commandline options

'''

import sys
import numpy as np
import numpysane as nps
import cv2
import re
import argparse
import os
import fnmatch
import re
import subprocess
import pipes
import heapq

from mrcal import cahvor
from mrcal import utils
from mrcal import poseutils
from mrcal import projections
from mrcal import cameramodel
import mrcal.optimizer as optimizer




def parse_args():
    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--focal',
                        type=float,
                        default=1970,
                        required=True,
                        help='Initial estimate of the focal length, in pixels')
    parser.add_argument('--imagersize',
                        nargs=2,
                        type=int,
                        default=(3904,3904),
                        help='Size of the imager. Used to extimate the coordinates of the center pixel')
    parser.add_argument('--outdir',
                        type=lambda d: d if os.path.isdir(d) else \
                                parser.error("--outdir requires an existing directory as the arg, but got '{}'".format(d)),
                        default='.',
                        help='Directory for the output camera models')
    parser.add_argument('--object-spacing',
                        required=True,
                        type=float,
                        help='Width of each square in the calibration board, in meters')
    parser.add_argument('--object-width-n',
                        type=int,
                        required=True,
                        help='How many points the calibration board has per side')
    parser.add_argument('--distortion-model',
                        required=False,
                        default='DISTORTION_OPENCV4',
                        help='''Which distortion model we're using. By default I use DISTORTION_OPENCV4''')
    parser.add_argument('--seed',
                        required=False,
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("--seed requires an existing, readable file as the arg, but got '{}'".format(f)),
                        help='''Model to use as a seed. This works ONLY if we have exactly one camera''')
    parser.add_argument('--jobs|-j',
                        type=int,
                        default=1,
                        help='How much parallelization we want. Like GNU make')
    parser.add_argument('--dots-cache',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("--dots-cache requires an existing, readable file as the arg, but got '{}'".format(f)),
                        required=False,
                        help='Allows us to pass in already-computed chessboard centers')

    parser.add_argument('--muse-extrinsics',
                        action='store_true',
                        required=False,
                        default=False,
                        help='''Apply MUSE's non-identity rotation for camera0''')

    parser.add_argument('--explore',
                        action='store_true',
                        required=False,
                        default=False,
                        help='''After the solve open an interactive shell to examine the solution''')

    parser.add_argument('images',
                        type=str,
                        nargs='+',
                        help='''A glob-per-camera for the images. Include a glob for each camera. It is
                        assumed that the image filenames in each glob are of of
                        the form xxxNNNyyy where xxx and yyy are common to all
                        images in the set, and NNN varies. This NNN is a frame
                        number, and identical frame numbers across different
                        globs signify a time-synchronized observation. I.e. you
                        can pass 'left*.jpg' and 'right*.jpg' to find images
                        'left0.jpg', 'left1.jpg', ..., 'right0.jpg',
                        'right1.jpg', ...''')



    return parser.parse_args()

def get_observations(Nw, Nh, globs, dots_vnl=None, exclude=set()):
    r'''Computes the point observations and returns them in a usable form

    We are given globs of images (one glob per camera), where the filenames
    encode the instantaneous frame numbers. This function invokes the chessboard
    finder to compute the point coordinates, and returns a tuple

      observations, indices_frame_camera, files_sorted

    where observations is an (N,object-width-n,object-width-n,2) array
    describing N board observations where the board has dimensions
    (object-width-n,object-width-n) and each point is an (x,y) pixel observation

    indices_frame_camera is an (N,2) array of integers where each observation is
    (index_frame,index_camera)

    files_sorted is a list of paths of images corresponding to the observations

    '''

    def get_dot_observations(Nw, Nh, globs, dots_vnl=None, exclude=set()):
        r'''Invokes mrgingham to get dot observations

        Returns a dict mapping from filename to a numpy array with a full grid
        of dot observations. If no grid was observed in a particular image, the
        relevant dict entry is empty

        This function takes an optional dots_vnl argument. If given, this is
        cached chessboard-finder results. The globs are then used to match image
        paths in this file, NOT on disk. If dots_vnl. is not None then we don't
        even need to have the original images

        '''

        Ncameras = len(globs)
        files_per_camera = []
        for i in xrange(Ncameras):
            files_per_camera.append([])

        def accum_files(f):
            for i_camera in xrange(Ncameras):
                if fnmatch.fnmatch(f, globs[i_camera]):
                    files_per_camera[i_camera].append(f)
                    return True
            return False



        if dots_vnl is None:
            if Nw != 10 or Nh != 10:
                raise Exception("mrgingham currently accepts ONLY 10x10 grids")

            args_mrgingham = ['mrgingham_from_image', '--chessboard', '--blur', '3', '--clahe', '--jobs', '10']
            args_mrgingham.extend(globs)

            sys.stderr.write("Computing chessboard corners from {}\n".format(globs))
            sys.stderr.write("Command (output can be passed to --dots-cache): {}\n".format(' '.join(pipes.quote(s) for s in args_mrgingham)))

            dots_output = subprocess.Popen(args_mrgingham, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            pipe = dots_output.stdout
        else:
            pipe = open(dots_vnl, 'r')


        mapping = {}
        context = {'f':    '',
                   'grid': np.array(())}

        def finish():
            if context['grid'].size:
                if Nw*Nh != context['grid'].size/2:
                    raise Exception("File '{}' expected to have {}*{}={} elements, but got {}". \
                                    format(context['f'], Nw,Nh,Nw*Nh, context['grid'].size/2))
                if context['f'] not in exclude:
                    if accum_files(context['f']):
                        mapping[context['f']] = context['grid']
                context['f']    = ''
                context['grid'] = np.array(())

        for line in pipe:
            if line[0] == '#':
                continue
            m = re.match('(\S+)\s+(.*?)$', line)
            if m is None:
                raise Exception("Unexpected line in the dots output: '{}'".format(line))
            if m.group(2)[:2] == '- ':
                finish()
                continue
            if context['f'] != m.group(1):
                finish()
                context['f'] = m.group(1)

            context['grid'] = nps.glue(context['grid'],
                                       np.fromstring(m.group(2), sep=' ', dtype=np.float),
                                       axis=-2)
        finish()

        if dots_vnl is None:
            sys.stderr.write("Done computing chessboard corners from {}\n".format(globs))

            if dots_output.wait() != 0:
                err = dots_output.stderr.read()
                raise Exception("mrgingham_from_image failed: {}".format(err))
        else:
            pipe.close()
        return mapping,files_per_camera


    indices_frame_camera = np.array((), dtype=np.int32)
    observations         = np.array((), dtype=float)

    # basic logic is this:
    #   for frames:
    #       for cameras:
    #           if have observation:
    #               push observations
    #               push indices_frame_camera

    # inputs[camera][image] = (image_filename, frame_number)
    mapping_file_dots,files_per_camera = get_dot_observations(Nw, Nh, globs, dots_vnl, exclude)
    mapping_file_framecamera,_,_       = utils.get_mapping_file_framecamera(files_per_camera)

    # I create a file list sorted by frame and then camera. So my for(frames)
    # {for(cameras) {}} loop will just end up looking at these files in order
    files_sorted = sorted(mapping_file_dots.keys(), key=lambda f: mapping_file_framecamera[f][1])
    files_sorted = sorted(files_sorted,             key=lambda f: mapping_file_framecamera[f][0])

    i_observation = 0

    i_frame_last = None
    index_frame  = -1
    for f in files_sorted:
        # The frame indices I return are consecutive starting from 0, NOT the
        # original frame numbers
        i_frame,i_camera = mapping_file_framecamera[f]
        if i_frame_last == None or i_frame_last != i_frame:
            index_frame += 1
            i_frame_last = i_frame

        indices_frame_camera = nps.glue(indices_frame_camera,
                                        np.array((index_frame, i_camera), dtype=np.int32),
                                        axis=-2)
        observations = nps.glue(observations,
                                mapping_file_dots[f].reshape(Nh,Nw,2),
                                axis=-4)

    return observations, indices_frame_camera, files_sorted


def estimate_local_calobject_poses( indices_frame_camera, \
                                    dots, dot_spacing, focal, imagersize,
                                    Nwant):
    r"""Estimates pose of observed object in a single-camera view

    Given observations, and an estimate of camera intrinsics (focal lengths,
    imager size) computes an estimate of the pose of the calibration object in
    respect to the camera for each frame. This assumes that all frames are
    independent and all cameras are independent. This assumes a pinhole camera.

    This function is a wrapper around the solvePnP() openCV call, which does all
    the work.

    The observations are given in a numpy array with axes:

      (iframe, idot_x, idot_y, idot2d_xy)

    So as an example, the observed pixel coord of the dot (3,4) in frame index 5
    is the 2-vector dots[5,3,4,:]

    Missing observations are given as negative pixel coords.

    This function returns an (Nobservations,4,3) array, with the observations
    aligned with the dots and indices_frame_camera arrays. Each observation
    slice is (4,3) in glue(R, t, axis=-2)

    """

    Nobservations = indices_frame_camera.shape[0]

    # this wastes memory, but makes it easier to keep track of which data goes
    # with what
    Rt_all = np.zeros( (Nobservations, 4, 3), dtype=float)
    camera_matrix = np.array((( focal, 0,        (imagersize[0] - 1)/2), \
                              (        0, focal, (imagersize[1] - 1)/2), \
                              (        0,        0,                 1)))

    full_object = utils.get_full_object(Nwant, Nwant, dot_spacing)

    for i_observation in xrange(dots.shape[0]):
        d = dots[i_observation, ...]

        d = nps.clump( nps.glue(d, full_object, axis=-1), n=2)
        # d is (Nwant*Nwant,5); each row is an xy pixel observation followed by the xyz
        # coord of the point in the calibration object. I pick off those rows
        # where the observations are both >= 0. Result should be (N,5) where N
        # <= Nwant*Nwant
        i = (d[..., 0] >= 0) * (d[..., 1] >= 0)
        d = d[i,:]

        # copying because cv2.solvePnP() requires contiguous memory apparently
        observations = np.array(d[:,:2][..., np.newaxis])
        ref_object   = np.array(d[:,2:][..., np.newaxis])
        result,rvec,tvec = cv2.solvePnP(np.array(ref_object),
                                        np.array(observations),
                                        camera_matrix, None)
        if not result:
            raise Exception("solvePnP failed!")
        if tvec[2] <= 0:
            raise Exception("solvePnP says that tvec.z <= 0. Maybe needs a flip, but please examine this")

        Rt_all[i_observation, :, :] = poseutils.Rt_from_rt(nps.glue(rvec.ravel(), tvec.ravel(), axis=-1))


    return Rt_all

def estimate_camera_poses( calobject_poses_local_Rt, indices_frame_camera, \
                           dots, dot_spacing, Ncameras,
                           Nwant):
    r'''Estimate camera poses in respect to each other

    We are given poses of the calibration object in respect to each observing
    camera. We also have multiple cameras observing the same calibration object
    at the same time, and we have local poses for each. We can thus compute the
    relative camera pose from these observations.

    We have many frames that have different observations from the same set of
    fixed-relative-pose cameras, so we compute the relative camera pose to
    optimize the observations

    '''
    # I need to compute an estimate of the pose of each camera in the coordinate
    # system of camera0. This is only possible if there're enough overlapping
    # observations. For instance if camera1 has overlapping observations with
    # camera2, but neight overlap with camera0, then I can't relate camera1,2 to
    # camera0. However if camera2 has overlap with camera2, then I can compute
    # the relative pose of camera2 from its overlapping observations with
    # camera0. And I can compute the camera1-camera2 pose from its overlapping
    # data, and then transform to the camera0 coord system using the
    # previously-computed camera2-camera0 pose
    #
    # I do this by solving a shortest-path problem using Dijkstra's algorithm to
    # find a set of pair overlaps between cameras that leads to camera0. I favor
    # edges with large numbers of shared observed frames

    # list of camera-i to camera-0 transforms. I keep doing stuff until this
    # list is full of valid data
    Rt_0c = [None] * (Ncameras-1)

    def compute_pairwise_Rt(icam_to, icam_from):

        # I want to assume that icam_from > icam_to. If it's not true, compute the
        # opposite transform, and invert
        if icam_to > icam_from:
            Rt = compute_pairwise_Rt(icam_from, icam_to)
            return poseutils.invert_Rt(Rt)

        if icam_to == icam_from:
            raise Exception("Got icam_to == icam_from ( = {} ). This was probably a mistake".format(icam_to))

        # Now I KNOW that icam_from > icam_to


        Nobservations = indices_frame_camera.shape[0]

        # This is a hack. I look at the correspondence of camera0 to camera i for i
        # in 1:N-1. I ignore all correspondences between cameras i,j if i!=0 and
        # j!=0. Good enough for now
        full_object = utils.get_full_object(Nwant, Nwant, dot_spacing)

        A = np.array(())
        B = np.array(())

        # I traverse my observation list, and pick out observations from frames
        # that had data from both my cameras
        i_frame_last = -1
        d0  = None
        d1  = None
        Rt0 = None
        Rt1 = None
        for i_observation in xrange(Nobservations):
            i_frame_this,i_camera_this = indices_frame_camera[i_observation, ...]
            if i_frame_this != i_frame_last:
                d0  = None
                d1  = None
                Rt0 = None
                Rt1 = None
                i_frame_last = i_frame_this

            # The cameras appear in order. And above I made sure that icam_from >
            # icam_to, so I take advantage of that here
            if i_camera_this == icam_to:
                if Rt0 is not None:
                    raise Exception("Saw multiple camera{} observations in frame {}".format(i_camera_this,
                                                                                            i_frame_this))
                Rt0 = calobject_poses_local_Rt[i_observation, ...]
                d0  = dots[i_observation, ...]
            elif i_camera_this == icam_from:
                if Rt0 is None: # have camera1 observation, but not camera0
                    continue

                if Rt1 is not None:
                    raise Exception("Saw multiple camera{} observations in frame {}".format(i_camera_this,
                                                                                            i_frame_this))
                Rt1 = calobject_poses_local_Rt[i_observation, ...]
                d1  = dots[i_observation, ...]



                # d looks at one frame and has shape (Nwant,Nwant,7). Each row is
                #   xy pixel observation in left camera
                #   xy pixel observation in right camera
                #   xyz coord of dot in the calibration object coord system
                d = nps.glue( d0, d1, full_object, axis=-1 )

                # squash dims so that d is (Nwant*Nwant,7)
                d = nps.clump(d, n=2)

                ref_object = nps.clump(full_object, n=2)

                # # It's possible that I could have incomplete views of the
                # # calibration object, so I pull out only those point
                # # observations that have a complete view. In reality, I
                # # currently don't accept any incomplete views, and much outside
                # # code would need an update to support that. This doesn't hurt, however

                # # d looks at one frame and has shape (10,10,7). Each row is
                # #   xy pixel observation in left camera
                # #   xy pixel observation in right camera
                # #   xyz coord of dot in the calibration object coord system
                # d = nps.glue( d0, d1, full_object, axis=-1 )

                # # squash dims so that d is (100,7)
                # d = nps.transpose(nps.clump(nps.mv(d, -1, -3), n=2))

                # # I pick out those points that have observations in both frames
                # i = (d[..., 0] >= 0) * (d[..., 1] >= 0) * (d[..., 2] >= 0) * (d[..., 3] >= 0)
                # d = d[i,:]

                # # ref_object is (N,3)
                # ref_object = d[:,4:]

                A = nps.glue(A, nps.matmult( ref_object, nps.transpose(Rt0[:3,:])) + Rt0[3,:],
                             axis = -2)
                B = nps.glue(B, nps.matmult( ref_object, nps.transpose(Rt1[:3,:])) + Rt1[3,:],
                             axis = -2)

        return utils.align3d_procrustes(A, B)


    def compute_connectivity_matrix():
        r'''Returns a connectivity matrix of camera observations

        Returns a symmetric (Ncamera,Ncamera) matrix of integers, where each
        entry contains the number of frames containing overlapping observations
        for that pair of cameras

        '''

        camera_connectivity = np.zeros( (Ncameras,Ncameras), dtype=int )
        def finish_frame(i0, i1):
            for ic0 in xrange(i0, i1):
                for ic1 in xrange(ic0+1, i1+1):
                    camera_connectivity[indices_frame_camera[ic0,1], indices_frame_camera[ic1,1]] += 1
                    camera_connectivity[indices_frame_camera[ic1,1], indices_frame_camera[ic0,1]] += 1

        f_current       = -1
        i_start_current = -1

        for i in xrange(len(indices_frame_camera)):
            f,c = indices_frame_camera[i]
            if f < f_current:
                raise Exception("I'm assuming the frame indices are increasing monotonically")
            if f > f_current:
                # first camera in this observation
                f_current = f
                if i_start_current >= 0:
                    finish_frame(i_start_current, i-1)
                i_start_current = i
        finish_frame(i_start_current, len(indices_frame_camera)-1)
        return camera_connectivity


    shared_frames = compute_connectivity_matrix()

    class Node:
        def __init__(self, camera_idx):
            self.camera_idx    = camera_idx
            self.from_idx      = -1
            self.cost_to_node  = None

        def __lt__(self, other):
            return self.cost_to_node < other.cost_to_node

        def visit(self):
            '''Dijkstra's algorithm'''
            self.finish()

            for neighbor_idx in xrange(Ncameras):
                if neighbor_idx == self.camera_idx                  or \
                   shared_frames[neighbor_idx,self.camera_idx] == 0:
                    continue
                neighbor = nodes[neighbor_idx]

                if neighbor.visited():
                    continue

                cost_edge = Node.compute_edge_cost(shared_frames[neighbor_idx,self.camera_idx])

                cost_to_neighbor_via_node = self.cost_to_node + cost_edge
                if not neighbor.seen():
                    neighbor.cost_to_node = cost_to_neighbor_via_node
                    neighbor.from_idx     = self.camera_idx
                    heapq.heappush(heap, neighbor)
                else:
                    if cost_to_neighbor_via_node < neighbor.cost_to_node:
                        neighbor.cost_to_node = cost_to_neighbor_via_node
                        neighbor.from_idx     = self.camera_idx
                        heapq.heapify(heap) # is this the most efficient "update" call?

        def finish(self):
            '''A shortest path was found'''
            if self.camera_idx == 0:
                # This is the reference camera. Nothing to do
                return

            Rt_fc = compute_pairwise_Rt(self.from_idx, self.camera_idx)

            if self.from_idx == 0:
                Rt_0c[self.camera_idx-1] = Rt_fc
                return

            Rt_0f = Rt_0c[self.from_idx-1]
            Rt_0c[self.camera_idx-1] = poseutils.compose_Rt( Rt_0f, Rt_fc)

        def visited(self):
            '''Returns True if this node went through the heap and has then been visited'''
            return self.camera_idx == 0 or Rt_0c[self.camera_idx-1] is not None

        def seen(self):
            '''Returns True if this node has been in the heap'''
            return self.cost_to_node is not None

        @staticmethod
        def compute_edge_cost(shared_frames):
            # I want to MINIMIZE cost, so I MAXIMIZE the shared frames count and
            # MINIMIZE the hop count. Furthermore, I really want to minimize the
            # number of hops, so that's worth many shared frames.
            cost = 100000 - shared_frames
            assert(cost > 0) # dijkstra's algorithm requires this to be true
            return cost



    nodes = [Node(i) for i in xrange(Ncameras)]
    nodes[0].cost_to_node = 0
    heap = []

    nodes[0].visit()
    while heap:
        node_top = heapq.heappop(heap)
        node_top.visit()

    if any([x is None for x in Rt_0c]):
        raise Exception("ERROR: Don't have complete camera observations overlap!\n" +
                        ("Past-camera-0 Rt:\n{}\n".format(Rt_0c))                   +
                        ("Shared observations matrix:\n{}\n".format(shared_frames)))


    return nps.cat(*Rt_0c)



def estimate_frame_poses(calobject_poses_local_Rt, camera_poses_Rt, indices_frame_camera, dot_spacing,
                         Nwant):
    r'''Estimate poses of the calibration object observations

    We're given

    calobject_poses_local_Rt:

      an array of dimensions (Nobservations,4,3) that contains a
      calobject-to-camera transformation estimate, for each observation of the
      board

    camera_poses_Rt:

      an array of dimensions (Ncameras-1,4,3) that contains a camerai-to-camera0
      transformation estimate. camera0-to-camera0 is the identity, so this isn't
      stored

    indices_frame_camera:

      an array of shape (Nobservations,2) that indicates which frame and which
      camera has observed the board

    With this data, I return an array of shape (Nframes,6) that contains an
    estimate of the pose of each frame, in the camera0 coord system. Each row is
    (r,t) where r is a Rodrigues rotation and t is a translation that map points
    in the calobject coord system to that of camera 0

    '''


    def process(i_observation0, i_observation1):
        R'''Given a range of observations corresponding to the same frame, estimate the
        frame pose'''

        def T_camera_board(i_observation):
            r'''Transform from the board coords to the camera coords'''
            i_frame,i_camera = indices_frame_camera[i_observation, ...]

            Rt_f = calobject_poses_local_Rt[i_observation, :,:]
            if i_camera == 0:
                return Rt_f

            # T_cami_cam0 T_cam0_board = T_cami_board
            Rt_cam = camera_poses_Rt[i_camera-1, ...]

            return poseutils.compose_Rt( Rt_cam, Rt_f)


        # frame poses should map FROM the frame coord system TO the ref coord
        # system (camera 0).

        # special case: if there's a single observation, I just use it
        if i_observation1 - i_observation0 == 1:
            return T_camera_board(i_observation0)

        # Multiple cameras have observed the object for this frame. I have an
        # estimate of these for each camera. I merge them in a lame way: I
        # average out the positions of each point, and fit the calibration
        # object into the mean point cloud
        obj = utils.get_full_object(Nwant, Nwant, dot_spacing)

        sum_obj_unproj = obj*0
        for i_observation in xrange(i_observation0, i_observation1):
            Rt = T_camera_board(i_observation)
            sum_obj_unproj += poseutils.transform_point_Rt(Rt, obj)

        mean = sum_obj_unproj / (i_observation1 - i_observation0)

        # Got my point cloud. fit

        # transform both to shape = (N*N, 3)
        obj  = nps.clump(obj,  n=2)
        mean = nps.clump(mean, n=2)
        return utils.align3d_procrustes( mean, obj )





    frame_poses_rt = np.array(())

    i_frame_current          = -1
    i_observation_framestart = -1;

    for i_observation in xrange(indices_frame_camera.shape[0]):
        i_frame,i_camera = indices_frame_camera[i_observation, ...]

        if i_frame != i_frame_current:
            if i_observation_framestart >= 0:
                Rt = process(i_observation_framestart, i_observation)
                frame_poses_rt = nps.glue(frame_poses_rt, poseutils.rt_from_Rt(Rt), axis=-2)

            i_observation_framestart = i_observation
            i_frame_current = i_frame

    if i_observation_framestart >= 0:
        Rt = process(i_observation_framestart, indices_frame_camera.shape[0])
        frame_poses_rt = nps.glue(frame_poses_rt, poseutils.rt_from_Rt(Rt), axis=-2)

    return frame_poses_rt

def make_seed(inputs, model_seed):
    r'''Generate a solution seed for a given input'''


    def make_intrinsics_vector(i_camera, inputs):
        imager_w,imager_h = inputs['imagersize']
        return np.array( (inputs['focal_estimate'], inputs['focal_estimate'],
                          float(imager_w-1)/2.,
                          float(imager_h-1)/2.))




    if model_seed is None:
        intrinsics_data = nps.cat( *[make_intrinsics_vector(i_camera, inputs) \
                                     for i_camera in xrange(inputs['Ncameras'])] )
        intrinsics = ('DISTORTION_NONE', intrinsics_data)
    else:
        intrinsics = list(model_seed.intrinsics())
        intrinsics[1] = nps.dummy(intrinsics[1], -2) # add 'cameras' dimension of length 1

    # I compute an estimate of the poses of the calibration object in the local
    # coord system of each camera for each frame. This is done for each frame
    # and for each camera separately. This isn't meant to be precise, and is
    # only used for seeding.
    #
    # I get rotation, translation in a (4,3) array, such that R*calobject + t
    # produces the calibration object points in the coord system of the camera.
    # The result has dimensions (N,4,3)
    calobject_poses_local_Rt = \
        estimate_local_calobject_poses( inputs['indices_frame_camera'],
                                        inputs['dots'],
                                        inputs['dot_spacing'],
                                        inputs['focal_estimate'],
                                        inputs['imagersize'],
                                        inputs['object_width_n'])
    # these map FROM the coord system of the calibration object TO the coord
    # system of this camera

    # I now have a rough estimate of calobject poses in the coord system of each
    # frame. One can think of these as two sets of point clouds, each attached to
    # their camera. I can move around the two sets of point clouds to try to match
    # them up, and this will give me an estimate of the relative pose of the two
    # cameras in respect to each other. I need to set up the correspondences, and
    # align3d_procrustes() does the rest
    #
    # I get transformations that map points in 1-Nth camera coord system to 0th
    # camera coord system. Rt have dimensions (N-1,4,3)
    camera_poses_Rt = estimate_camera_poses( calobject_poses_local_Rt,
                                             inputs['indices_frame_camera'],
                                             inputs['dots'],
                                             inputs['dot_spacing'],
                                             inputs['Ncameras'],
                                             inputs['object_width_n'])

    if len(camera_poses_Rt):
        # extrinsics should map FROM the ref coord system TO the coord system of the
        # camera in question. This is backwards from what I have
        extrinsics = nps.atleast_dims( poseutils.rt_from_Rt(poseutils.invert_Rt(camera_poses_Rt)),
                                       -2 )
    else:
        extrinsics = np.zeros((0,6))

    frames = \
        estimate_frame_poses(calobject_poses_local_Rt, camera_poses_Rt,
                             inputs['indices_frame_camera'],
                             inputs['dot_spacing'],
                             inputs['object_width_n'])
    return intrinsics,extrinsics,frames









args = parse_args()
Ncameras = len(args.images)
if Ncameras > 10:
    raise Exception("Got {} image globs. It should be one glob per camera, and this sounds like WAY too make cameras. Did you forget to escape your glob?". \
                    format(Ncameras))
if args.seed is not None:
    if not Ncameras == 1:
        raise Exception("Currently --seed works only with ONE camera")
    args.seed = cameramodel(args.seed)


images         = [os.path.expanduser(g) for g in args.images]
object_spacing = args.object_spacing
object_width_n = args.object_width_n


observations, indices_frame_camera,paths = \
    get_observations(object_width_n,
                     object_width_n,
                     images,
                     args.dots_cache)

inputs = {'imagersize':           args.imagersize,
          'focal_estimate':       args.focal,
          'Ncameras':             Ncameras,
          'indices_frame_camera': indices_frame_camera,
          'dots':                 observations,
          'dot_spacing':          object_spacing,
          'object_width_n':       object_width_n}



intrinsics,extrinsics,frames = make_seed(inputs, args.seed)
distortion_model = intrinsics[0]
intrinsics       = intrinsics[1]

# done with everything. Run the calibration, in several passes. If we were given
# a seed, I presumably have an estimate of the solution, so I skip straight to
# the final pass
if args.seed is None:
    distortion_model = "DISTORTION_NONE"
    optimizer.optimize(intrinsics, extrinsics, frames, None,
                       observations, indices_frame_camera,
                       None, None,
                       distortion_model,
                       do_optimize_intrinsic_core        = False,
                       do_optimize_intrinsic_distortions = False,
                       calibration_object_spacing        = object_spacing,
                       calibration_object_width_n        = object_width_n)

    stats = optimizer.optimize(intrinsics, extrinsics, frames, None,
                       observations, indices_frame_camera,
                       None, None,
                       distortion_model,
                       do_optimize_intrinsic_core        = True,
                       do_optimize_intrinsic_distortions = False,
                       calibration_object_spacing        = object_spacing,
                       calibration_object_width_n        = object_width_n)

    MMt = stats['intrinsic_covariances']
    print "done with {}".format(distortion_model)

# final pass
Ndistortions0      = optimizer.getNdistortionParams(distortion_model)

distortion_model   = args.distortion_model
Ndistortions       = optimizer.getNdistortionParams(distortion_model)
Ndistortions_delta = Ndistortions - Ndistortions0
intrinsics         = nps.glue( intrinsics, np.random.random((Ncameras, Ndistortions_delta))*1e-5, axis=-1 )
stats = optimizer.optimize(intrinsics, extrinsics, frames, None,
                   observations, indices_frame_camera,
                   None, None,
                   distortion_model,
                   do_optimize_intrinsic_core        = True,
                   do_optimize_intrinsic_distortions = True,
                   calibration_object_spacing        = object_spacing,
                   calibration_object_width_n        = object_width_n)
MMt = stats['intrinsic_covariances']
print "done with {}, optimizing DISTORTIONS".format(distortion_model)





# Write the output models
for i_camera in xrange(Ncameras):
    if args.muse_extrinsics:
        Rt_r0 = np.array([[ 0.,  0.,  1.],
                          [ 1.,  0.,  0.],
                          [ 0.,  1.,  0.],
                          [ 0.,  0.,  0.]])
    else:
        # identity
        Rt_r0 = np.array([[ 1.,  0.,  0.],
                          [ 0.,  1.,  0.],
                          [ 0.,  0.,  1.],
                          [ 0.,  0.,  0.]])

    if i_camera >= 1:
        rt_x0 = extrinsics[i_camera-1,:].ravel()
    else:
        rt_x0 = np.zeros(6)
    Rt_rx = poseutils.compose_Rt(Rt_r0,
                                 poseutils.invert_Rt( poseutils.Rt_from_rt(rt_x0)))

    c = cameramodel( intrinsics          = (distortion_model, intrinsics[i_camera,:]),
                     extrinsics_Rt_toref = Rt_rx )

    cahvorfile = '{}/camera-{}.cahvor'.format(args.outdir, i_camera)
    cahvor.write(cahvorfile, c,
                 "generated with {}\n\n".format(sys.argv))
    print "Wrote {}".format(cahvorfile)

    cameramodelfile = '{}/camera-{}.cameramodel'.format(args.outdir, i_camera)
    c.write(cameramodelfile,
            "generated with {}\n\n".format(sys.argv))
    print "Wrote {}".format(cameramodelfile)

if args.explore:
    import gnuplotlib as gp


    projected = projections.calobservations_project(distortion_model, intrinsics, extrinsics, frames, object_spacing, object_width_n)
    err       = projections.calobservations_compute_reproj_error(projected, observations,
                                                                 indices_frame_camera, object_width_n)
    norm2_err_perimage = nps.inner( nps.clump(err,n=-3),
                                    nps.clump(err,n=-3) )
    rms_err_perimage   = np.sqrt( norm2_err_perimage / (object_width_n*object_width_n) )

    i_observations_worst = list(reversed(np.argsort(rms_err_perimage)))
    print "worst observations: {}".format(i_observations_worst[:100])
    print "worst frame_camera indices and RMS:\n{}".format(nps.glue( indices_frame_camera[i_observations_worst,:],
                                                                    nps.transpose(rms_err_perimage[i_observations_worst]), axis = -1))

    print "worst image paths: {}".format([paths[p] for p in i_observations_worst])

    print "\nTo visualize the i-th worst image, call show_worst(i)\n\n"

    i_observation_from_path = {}
    for i_observation in xrange(len(observations)):
        i_observation_from_path[ paths[i_observation] ] = i_observation

    def show(observation):
        r'''Visualize calibration errors

        Takes either an integer (observation index) or a string (path)

        '''

        if isinstance(observation, int):
            i_observation = observation
        elif isinstance(observation, str):
            i_observation = i_observation_from_path[observation]
        else:
            raise Exception("observation should be a string or an integer; got type(observation) = {}".format(type(observation)))

        obs = nps.clump( observations[i_observation], n=2)
        i_frame,i_camera = indices_frame_camera[i_observation]
        reproj = nps.clump( projected[i_frame,i_camera], n=2)

        # zrange = frames[inputs['indices_frame_camera'][:,0], 5]

        # gp.plot(utils.get_observation_size(observations),
        #         rms_err_perimage,
        #         _with='points pt 7 ps 2', xlabel="size", ylabel="rms")
        # import time
        # time.sleep(1000)
        # sys.exit()

        # gp.plot( zrange,
        #          rms_err_perimage,
        #          _with='points pt 7 ps 2', xlabel="zrange", ylabel="rms err")
        # import time
        # time.sleep(1000)
        # sys.exit()

        # gp.plot(utils.get_observation_size(observations),
        #         zrange,
        #         _with='points pt 7 ps 2', xlabel="size", ylabel="zrange",
        #         xmin=0, ymin=0)
        # import time
        # time.sleep(1000)
        # sys.exit()

        # error per dot
        err = np.sqrt(nps.inner(reproj - obs,
                                reproj - obs))

        gp.plot( (reproj[:,0], reproj[:,1], err,
                  {'with': 'points pt 7 ps 2 palette', 'legend': 'reprojection error', 'tuplesize': 3}),
                 (obs   [:,0], obs   [:,1], {'with': 'points', 'legend': 'observed'}),
                 (reproj[:,0], reproj[:,1], {'with': 'points', 'legend': 'hypothesis'}),
                 rgbimage=paths[i_observation],
                 square=1,cbmin=0,
                 _set='autoscale noextend',
                 title='Worst case. i_observation={}, i_frame={}, i_camera={}, path={}, error_RMS={}'.format( i_observation, i_frame, i_camera, paths[i_observation], rms_err_perimage[i_observation]))

    def show_worst(i):
        show( i_observations_worst[i] )


    # I visualize the intrinsics uncertainty due to uncertainty in the input
    # image coordinates of chessboard corners. A part of this computation was
    # done in the mrcal core, and intermediate results are available in MMt =
    # stats['intrinsic_covariances']. Comment from the mrcal core:
    #
    #     This function is part of sensitivity analysis to quantify how much errors in
    #     the input pixel observations affect our solution. A "good" solution will not
    #     be very sensitive: measurement noise doesn't affect the solution very much.
    #
    #     I minimize a cost function E = norm2(x) where x is the measurements. Some
    #     elements of x depend on inputs, and some don't (regularization for instance).
    #     I perturb the inputs, reoptimize (assuming everything is linear) and look
    #     what happens to the state p. I'm at an optimum p*:
    #
    #       dE/dp (p=p*) = Jt x (p=p*) = 0
    #
    #     I perturb the inputs:
    #
    #       E(x(p+dp, m+dm)) = norm2( x + J dp + dx/dm dm)
    #
    #     And I reoptimize:
    #
    #       dE/ddp ~ ( x + J dp + dx/dm dm)t J = 0
    #
    #     I'm at an optimum, so Jtx = 0, so
    #
    #       -Jt dx/dm dm = JtJ dp
    #
    #     So if I perturb my input observation vector m by dm, the resulting effect on
    #     the parameters is dp = M dm
    #
    #       where M = -inv(JtJ) Jt dx/dm
    #
    #     In order to be useful I need to do something with M. Let's say I want to
    #     quantify how precise our optimal intrinsics are. Ultimately these are always
    #     used in a projection operation. So given a 3d observation vector v, I project
    #     it onto our image plane:
    #
    #       q = project(v, intrinsics)
    #
    #     I assume an independent, gaussian noise on my input observations, and for a
    #     set of given observation vectors v, I compute the effect on the projection.
    #
    #       dq = dprojection/dintrinsics dintrinsics
    #
    #     dprojection/dintrinsics comes from cvProjectPoints2()
    #     dintrinsics is the shift in our optimal state: M dm
    #
    #     If dm represents noise of the zero-mean, independent, gaussian variety, then
    #     dp is also zero-mean gaussian, but no longer independent.
    #
    #       Var(dp) = M Var(dm) Mt = M Mt s^2
    #
    #     where s is the standard deviation of the noise of each parameter in dm.
    #
    #     The intrinsics of each camera have 3 components:
    #
    #     - f: focal lengths
    #     - c: center pixel coord
    #     - d: distortion parameters
    #
    #     Let me define dprojection/df = F, dprojection/dc = C, dprojection/dd = D.
    #     These all come from cvProjectPoints2().
    #
    #     Rewriting the projection equation I get
    #
    #       q = project(v,  f,c,d)
    #       dq = F df + C dc + D dd
    #
    #     df,dc,dd are random variables that come from dp.
    #
    #       Var(dq) = F Covar(df,df) Ft +
    #                 C Covar(dc,dc) Ct +
    #                 D Covar(dd,dd) Dt +
    #                 F Covar(df,dc) Ct +
    #                 F Covar(df,dd) Dt +
    #                 C Covar(dc,df) Ft +
    #                 C Covar(dc,dd) Dt +
    #                 D Covar(dd,df) Ft +
    #                 D Covar(dd,dc) Ct
    #
    #     Covar(dx,dy) are all submatrices of the larger Var(dp) matrix we computed
    #     above: M Mt s^2.
    #
    #     Here I look ONLY at the interactions of intrinsic parameters for a particular
    #     camera with OTHER intrinsic parameters of the same camera. I ignore
    #     cross-camera interactions and interactions with other parameters, such as the
    #     frame poses and extrinsics.
    #
    #     For mrcal, the measurements are
    #
    #     1. reprojection errors of chessboard grid observations
    #     2. reprojection errors of individual point observations
    #     3. range errors for points with known range
    #     4. regularization terms
    #
    #     The observed pixel measurements come into play directly into 1 and 2 above,
    #     but NOT 3 and 4. So
    #
    #       dx/dm = [ I ]
    #               [ 0 ]
    #
    #     I thus ignore measurements past the observation set.
    #
    #     My matrices are large and sparse. Thus I compute the blocks of M Mt that I
    #     need here, and return these densely to the upper levels (python). These
    #     callers will then use these dense matrices to finish the computation
    #
    #       M Mt = sum(outer(col(M), col(M)))
    #       col(M) = -solve(JtJ, row(J))


    W,H=intrinsics[0,2:4]*2
    gridn = 20
    w = np.linspace(0,W,gridn)
    h = np.linspace(0,H,gridn)
    # shape: Nwidth,Nheight,2
    grid  = nps.reorder(nps.cat(*np.meshgrid(w,h)), -1, -2, -3)

    # shape: Nwidth,Nheight,3
    V = projections.unproject(grid, c.intrinsics())

    plots = []
    for i_camera in xrange(len(intrinsics)):

        fxy         = intrinsics[i_camera, 0:2]
        cxy         = intrinsics[i_camera, 2:4]
        distortions = intrinsics[i_camera, 4: ]

        camera_matrix = np.array(((fxy[0], 0,      cxy[0]),
                                  (0,      fxy[1], cxy[1]),
                                  (0,      0,      1)))

        imagePoints,jacobian = \
            cv2.projectPoints(V.reshape(gridn*gridn,3), # 3d vectors to project
                              np.zeros(3), np.zeros(3), # no extrinsics
                              camera_matrix, distortions)

        imagePoints = imagePoints.reshape(gridn,gridn,2)
        jacobian    = jacobian.reshape(gridn,gridn, 2, jacobian.shape[1])

        F = jacobian[..., 6: 8]
        C = jacobian[..., 8:10]
        D = jacobian[..., 10: ]

        Cff = MMt[i_camera, 0:2, 0:2]
        Cfc = MMt[i_camera, 0:2, 2:4]
        Cfd = MMt[i_camera, 0:2, 4:]
        Ccf = MMt[i_camera, 2:4, 0:2]
        Ccc = MMt[i_camera, 2:4, 2:4]
        Ccd = MMt[i_camera, 2:4, 4:]
        Cdf = MMt[i_camera, 4:,  0:2]
        Cdc = MMt[i_camera, 4:,  2:4]
        Cdd = MMt[i_camera, 4:,  4:]

        # shape Nwidth,Nheight,2,2: each slice is a 2x2 covariance
        Vdprojection = \
            nps.matmult(F,Cff,nps.transpose(F)) + \
            nps.matmult(F,Cfc,nps.transpose(C)) + \
            nps.matmult(F,Cfd,nps.transpose(D)) + \
            nps.matmult(C,Ccf,nps.transpose(F)) + \
            nps.matmult(C,Ccc,nps.transpose(C)) + \
            nps.matmult(C,Ccd,nps.transpose(D)) + \
            nps.matmult(D,Cdf,nps.transpose(F)) + \
            nps.matmult(D,Cdc,nps.transpose(C)) + \
            nps.matmult(D,Cdd,nps.transpose(D))

        # Let x be a 0-mean normally-distributed 2-vector with covariance V.
        # E(norm2(x)) = E(x0*x0 + x1*x1) = E(x0*x0) + E(x1*x1) = trace(V)

        @nps.broadcast_define( (('n','n'),), ())
        def trace(x):
            return np.trace(x)
        Erms = np.sqrt(trace(Vdprojection))

        plots.append(gp.gnuplotlib(_3d=1,
                                   set=['xrange noextend',
                                        'yrange noextend reverse',
                                        'view equal xy',
                                        'view map',
                                        'contour surface',
                                        'cntrparam levels incremental 10,-0.1,0'],
                                   title="Camera {}".format(i_camera)))

        # Currently "with image" can't produce contours. I work around this, by
        # plotting the data a second time.
        # Yuck.
        # https://sourceforge.net/p/gnuplot/mailman/message/36371128/
        plots[-1].plot( (Erms, dict(               tuplesize=3, _with='image')),
                        (Erms, dict(legend="Erms", tuplesize=3, _with='lines nosurface')))

    import IPython
    IPython.embed()
