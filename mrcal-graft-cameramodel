#!/usr/bin/python3

r'''Combines the intrinsics of one cameramodel with the extrinsics of another

SYNOPSIS

  $ mrcal-graft-cameramodel
      intrinsics.cameramodel
      extrinsics.cameramodel
      > joint.cameramodel
  Merged intrinsics from 'intrinsics.cameramodel' with extrinsics from
  'exrinsics.cameramodel'

This tool combines intrinsics and extrinsics from different sources into a
single model. The output is written to standard out in mrcal-native format

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--writecahvor',
                        action='store_true',
                        help='''If given, we write the output using the cahvor file format''')
    parser.add_argument('intrinsics',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The camera model must be an existing readable file, but got '{}'".format(f)),
                        help='''Input camera model for the intrinsics. Assumed to be mrcal native, Unless the
                        name is xxx.cahvor, in which case the cahvor format is assumed''')
    parser.add_argument('extrinsics',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The camera model must be an existing readable file, but got '{}'".format(f)),
                        help='''Input camera model for the extrinsics. Assumed to be mrcal native, Unless the
                        name is xxx.cahvor, in which case the cahvor format is assumed''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README




import numpy as np
import numpysane as nps
import mrcal
import time

intrinsics = mrcal.cameramodel(args.intrinsics)
extrinsics = mrcal.cameramodel(args.extrinsics)

joint = mrcal.cameramodel( intrinsics                          = intrinsics.intrinsics(),
                           extrinsics_rt_fromref               = extrinsics.extrinsics_rt_fromref(),
                           imagersize                          = intrinsics.imagersize(),
                           invJtJ_intrinsics_full              = intrinsics.invJtJ_intrinsics_full(),
                           invJtJ_intrinsics_observations_only = intrinsics.invJtJ_intrinsics_observations_only(),
                           observed_pixel_uncertainty          = intrinsics.observed_pixel_uncertainty(),
                           valid_intrinsics_region             = intrinsics.valid_intrinsics_region())

note = \
    "Generated on {} with   {}\n".format(time.strftime("%Y-%m-%d %H:%M:%S"),
                                         ' '.join(mrcal.shellquote(s) for s in sys.argv))

sys.stderr.write("Combined\nIntrinsics from '{}'\nExtrinsics from '{}'\n". \
    format(args.intrinsics,
           args.extrinsics))


if args.writecahvor:
    import mrcal.cahvor
    mrcal.cahvor.write(sys.stdout, joint, note)
else:
    joint.write(sys.stdout, note)
