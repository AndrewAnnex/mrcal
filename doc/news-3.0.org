#+TITLE: mrcal 3.0 release notes
#+OPTIONS: toc:nil

* New in mrcal 3.0

fixed mrcal.show_geometry() axis_scale logic: e3e29bab

cross-uncertainty

mrcal.drt_ref_refperturbed__dbpacked()
mrcal.compose_rt_tinyrt0_gradientrt0()
mrcal.compose_rt_tinyrt1_gradientrt1
compose_r_tinyr1_gradientr1

2023-06-09 mrcal.show_projection_diff() has contour options like mrcal.show_projection_uncertainty()

commit 09d52a7f4475615db8f454f111246204b7279596
Date:   Tue Jun 20 16:07:57 2023 -0700
  mrcal-stereo, stereo_range() work properly if disparity_min > 0
  Invalid-disparity areas are now interpreted properly

commit 97298695e24d4e083ce7496fe42fd2a88a0083f3
Date:   Wed Jun 21 22:52:05 2023 -0700
  All the tools use /usr/bin/env in the #!
  Mac user who live life on hard mode now have it slightly easier

7aae63c8, previous one
build compat: no _GNU_SOURCE, glibc requirement

commit 700a18a01370a14e2f947c9fe24fdb7acdedcb10
Date:   Thu Jun 15 21:40:20 2023 -0700
  Support the more recent CHOLMOD APIs

Python API: renamed residuals_chessboard -> residuals_board
The previous name is still available for backwards compatibility

4923218d..: show_residuals_board_observation() and cmdline tool have --cbmax

073f55b5..: show_residuals_vectorfield(), .._magnitudes(), mrcal-show-residuals have --cbmax

Added CHOLMOD_factorization.rcond()

* Migration notes 2.3 -> 3.0

commit 76248fce8655fba0aec1175157cbe8f8da055b7a
Date:   Wed Jun 21 18:24:50 2023 -0700
  do_optimize_calobject_warp is true ONLY if Nobservations_board>0 is also true
  THIS IS A C-API-BREAKING CHANGE: mrcal_pack_solver_state_vector() and
  mrcal_unpack_solver_state_vector() now take one more argument.
  Prior to this patch you could get into an inconsistent state where different
  parts of the code has different ideas about what Nstate was


Python API: renamed residuals_chessboard -> residuals_board
The previous name is still available for backwards compatibility.
Use the new name if you can. You don't HAVE to

* todo
- add notes about the triangulated-points merge

- Old tools complain about new keywords:

  #+begin_example
mrcal-show-geometry --show-points /tmp/models-noisesample0-camera0.cameramodel
Traceback (most recent call last):
  File "/usr/bin/mrcal-show-geometry", line 186, in <module>
    plot = mrcal.show_geometry(models,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/mrcal/visualization.py", line 446, in show_geometry
    points = get_points_to_plot()
             ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/mrcal/visualization.py", line 416, in get_points_to_plot
    mrcal.corresponding_icam_extrinsics(icam_intrinsics,
TypeError: 'do_apply_regularization_unity_cam01' is an invalid keyword argument for mrcal.corresponding_icam_extrinsics()
  #+end_example

- new observed_pixel_uncertainty
  - apply sqrt() factor. git grep -n observed_pixel_uncertainty ..
  - Does too little data give smaller residuals? It should. Is this reflected in
    the sqrt() factor?

** triangulated features merge
*** =git grep -n Noutliers= Noutliers has change meaning: it's now =Nmeasurements_outliers=

   #+begin_src diff
   diff --git a/doc/c-api.org b/doc/c-api.org
   index 7d3c8939..2ae7d9d5 100644
   --- a/doc/c-api.org
   +++ b/doc/c-api.org
        /* The RMS error of the optimized fit at the optimum. Generally the residual */
        /* vector x contains error values for each element of q, so N observed pixels */
        /* produce 2N measurements: len(x) = 2*N. And the RMS error is */
        /*   sqrt( norm2(x) / N ) */
        double rms_reproj_error__pixels;

   -    /* How many pixel observations were thrown out as outliers. Each pixel */
   -    /* observation produces two measurements. Note that this INCLUDES any */
   -    /* outliers that were passed-in at the start */
   +    /* How many measurements were thrown out as outliers. Each pixel */
   +    /* observation of a chessboard point produces two measurements (x,y). */
   +    /* Note: this INCLUDES any outliers that were passed-in at the start */
        int Noutliers;
    } mrcal_stats_t;


   --- a/mrcal-calibrate-cameras
   +++ b/mrcal-calibrate-cameras
   @@ -745,13 +745,13 @@ Npoints_chessboard = args.object_width_n*args.object_height_n*Nobservations
    residuals = \
        stats['x'][:Npoints_chessboard*2]. \
        reshape(Nobservations, args.object_height_n, args.object_width_n, 2)
    worst_point_err = np.sqrt(np.max(nps.norm2( nps.clump(residuals, n=3) )))
    report += f"Worst residual (by measurement): {worst_point_err:.01f} pixels\n"
    if not args.skip_outlier_rejection:
   -    report += "Noutliers: {} out of {} total points: {:.01f}% of the data\n". \
   +    report += "Noutliers: {} out of {} total measurements: {:.01f}% of the data\n". \
            format(stats['Noutliers'],
                   args.object_height_n*args.object_width_n*len(observations),
                   100.0 * stats['Noutliers'] / (args.object_height_n*args.object_width_n*len(observations)))
    if calobject_warp is not None:
        report += f"calobject_warp = {calobject_warp}\n"
 
   #+end_src

*** divergent-rays-are outlier logic is weird
I declare and outlier on the first pass. That pass is for getting the threshold


** release checklist
These are notes to myself containing the steps needed to roll a new release

- docs: make sure all new python functions are described in python.org
- new [[file:versions.org][versions]]
- new [[file:news-2.2.org][news]]
- [[file:~/projects/mrcal/Makefile::PROJECT_NAME := mrcal][Makefile ABI version]]
- package build and upload
- versioned docs upload
- git tag
- move docs-default (symlink) on the server
