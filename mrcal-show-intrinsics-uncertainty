#!/usr/bin/python3

r'''Visualize the expected projection error due to uncertainty in the input

SYNOPSIS

  $ mrcal-show-intrinsics-uncertainty left.cameramodel
  ... a plot pops up showing the projection uncertainty of the intrinsics in
  ... this model

A calibration process produces the best-fitting camera parameters and the
uncertainty in these parameters. This tool examines the uncertainty in the
intrinsics. The intrinsics are used to project points in space to pixel
coordinates on the image plane. Thus the uncertainty in the intrinsics can be
translated to uncertainty in projection. This tool plots the expected value of
this projection error across the imager. Areas with a high expected projection
error are unreliable for further work.

Only mrcal-native .cameramodel files are supported because .cahvor files don't
store the data used in these computations.

See mrcal.compute_intrinsics_uncertainty() for a full description of the
computation performed here

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--gridn',
                        type=int,
                        default = (60,40),
                        nargs = 2,
                        help='''How densely we should sample the imager. By default we report a 60x40 grid''')
    parser.add_argument('--where',
                        type=float,
                        nargs=2,
                        help='''Center of the region of interest. Uncertainty is a relative concept, so I
                        focus on a particular area. I compute an implied
                        rotation to make that area as certain as possible. The
                        center of this focus area is given by this argument. If
                        omitted, we will focus on the center of the imager''')
    parser.add_argument('--radius',
                        type=float,
                        default=-1.,
                        help='''Radius of the region of interest. If ==0, we do NOT fit an implied rotation
                        at all. If omitted or <0, we use a "reasonable value:
                        min(width,height)/6. To fit with data across the WHOLE
                        imager: pass in a very large radius''')
    parser.add_argument('--outlierness',
                        action='store_true',
                        help='''Report an outlierness-based uncertainty, not an input-noise-based one''')
    parser.add_argument('--cbmax',
                        type=float,
                        default=3,
                        help='''Maximum range of the colorbar''')
    parser.add_argument('--extratitle',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')

    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of an interactive plot''')
    parser.add_argument('--extraset',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplot. Can be given multiple times''')

    parser.add_argument('model',
                        type=str,
                        help='''Input camera model. Assumed to be mrcal native, Unless the name is xxx.cahvor,
                        in which case the cahvor format is assumed. If "-' is given, we read standard input''')

    return parser.parse_args()

args  = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README




import mrcal

plotkwargs_extra = {}
if args.extraset is not None:
    plotkwargs_extra['set'] = args.extraset

model = mrcal.cameramodel(args.model)

if model.observed_pixel_uncertainty() is None:
    raise Exception("The given camera model doesn't have 'observed_pixel_uncertainty'. This is required to visualize the intrinsics.")

plot = mrcal.show_intrinsics_uncertainty(model,
                                         args.outlierness,
                                         args.gridn[0], args.gridn[1],
                                         focus_center = args.where,
                                         focus_radius = args.radius,
                                         hardcopy     = args.hardcopy,
                                         cbmax        = args.cbmax,
                                         extratitle   = args.extratitle,
                                         kwargs       = plotkwargs_extra)

if args.hardcopy is None:
    plot.wait()
