#!/usr/bin/python3

r'''Visualize the difference in projection between some models

SYNOPSIS

  $ mrcal-show-intrinsics-diff before.cameramodel after.cameramodel
  ... a plot pops up showing how these two models differ in their projections


If we're given exactly 2 models then I show the projection DIFFERENCE. I show
this as either a vector field or a heat map. If N > 2 then a vector field isn't
possible and we show a heat map of the STANDARD DEVIATION of the differences.

This routine takes into account the potential variability of camera rotation by
fitting this implied camera rotation to align the models as much as possible.
This is required because a camera pitch/yaw motion looks a lot like a shift in
the camera optical axis (cx,cy). So I could be comparing two sets of intrinsics
that both represent the same lens faithfully, but imply different rotations: the
rotation would be compensated for by a shift in cx,cy. If I compare the two sets
of intrinsics by IGNORING the rotations, the cx,cy difference would produce a
large diff despite both models being right.

The implied rotation is fit using a subset of the imager data:

  if --radius < 0 (the default):
     I fit a compensating rotation using a "reasonable" area in the center of
     the imager. I use --radius = min(width,height)/6.

  if --radius > 0:
     I use observation vectors within --radius pixels of --where. To use ALL the
     data, pass in a very large --radius.

  if --radius == 0:
     I do NOT fit a compensating rotation. Rationale: with radius == 0, I have
     no fitting data, so I do not fit anything at all.

  if --where is omitted (the default):
     --where is at the center of the imager

Generally the computation isn't very sensitive to choices of --radius and
--where, so omitting these is recommended.

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--gridn',
                        type=int,
                        default = (60,40),
                        nargs = 2,
                        help='''How densely we should sample the imager. By default we report a 60x40 grid''')
    parser.add_argument('--where',
                        type=float,
                        nargs=2,
                        help='''Center of the region of interest for this diff. It is usually impossible for
                        the models to match everywhere, but focusing on a
                        particular area can work better. The implied rotation
                        will be fit to match as large as possible an area
                        centered on this argument. If omitted, we will focus on
                        the center of the imager''')
    parser.add_argument('--radius',
                        type=float,
                        default=-1.,
                        help='''Radius of the region of interest. If ==0, we do NOT fit an implied rotation
                        at all. If omitted or <0, we use a "reasonable value:
                        min(width,height)/6. To fit with data across the WHOLE
                        imager: pass in a very large radius''')
    parser.add_argument('--cbmax',
                        type=float,
                        default=10,
                        help='''Maximum range of the colorbar''')

    parser.add_argument('--extratitle',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')

    parser.add_argument('--vectorfield',
                        action = 'store_true',
                        default = False,
                        help='''Plot the diff as a vector field instead of as a heat map. The vector field
                        contains more information (magnitude AND direction), but
                        is less clear at a glance''')

    parser.add_argument('--vectorscale',
                        type = float,
                        default = 1.0,
                        help='''If plotting a vectorfield, scale all the vectors by this factor. Useful to
                        improve legibility if the vectors are too small to
                        see''')

    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of making an interactive plot''')
    parser.add_argument('--extraset',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplot. Can be given multiple times''')

    parser.add_argument('models',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The cameramodel must be an existing readable file, but got '{}'".format(f)),
                        nargs='+',
                        help='''Camera models to diff''')

    args = parser.parse_args()

    if len(args.models) < 2:
        raise Exception("I need at least two models to diff. Instead got this: {}".format(args.models))

    return args

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README

if args.vectorscale != 1.0 and not args.vectorfield:
    raise Exception("--vectorscale only makes sense with --vectorfield")






import mrcal

plotkwargs_extra = {}
if args.extraset is not None:
    plotkwargs_extra['set'] = args.extraset

models = [mrcal.cameramodel(modelfilename) for modelfilename in args.models]

plot = mrcal.show_intrinsics_diff(models,
                                  args.gridn[0], args.gridn[1],
                                  focus_center    = args.where,
                                  focus_radius    = args.radius,
                                  vectorfield     = args.vectorfield,
                                  vectorscale     = args.vectorscale,
                                  hardcopy        = args.hardcopy,
                                  cbmax           = args.cbmax,
                                  extratitle      = args.extratitle,
                                  kwargs          = plotkwargs_extra)
if args.hardcopy is None:
    plot.wait()
