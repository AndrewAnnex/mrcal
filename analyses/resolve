#!/usr/bin/python3

r'''Loads a model, and re-runs the optimization problem used to generate it

This is useful to analyze the solve. We can generate perfect chessboard
observations, corrupted with perfect nominal noise to validate the idea that
differences observed with mrcal-show-projection-diff should be predictive by the
uncertainties reported by mrcal-show-projection-uncertainty IF the dominant
source of error is calibration-time sampling error

'''


import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--model-intrinsics',
                        help='''By default, all the nominal data comes from the
                        MODEL given in the positional argument. If
                        --model-intrinsics is given, the intrinsics only come
                        from this other model. These are applied only to the ONE
                        model in icam_intrinsics''')

    parser.add_argument('--perfect',
                        action= 'store_true',
                        help='''Make perfect observations and add perfect noise''')

    parser.add_argument('--verbose',
                        action = 'store_true',
                        help='''If given, reoptimize verbosely''')
    parser.add_argument('--skip-outlier-rejection',
                        action='store_true',
                        help='''Reoptimize with no outlier rejection''')
    parser.add_argument('--revive-outliers',
                        action='store_true',
                        help='''Un-mark the outliers''')

    parser.add_argument('model',
                        type=str,
                        help='''The camera model we read to make the perfect
                        observations. We get the frame poses and extrinsics from
                        this model. If --model-intrinsics isn't given, we get
                        the intrinsics from this model as well''')

    args = parser.parse_args()

    return args

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README





import mrcal
import numpy as np
import numpysane as nps

model = mrcal.cameramodel(args.model)
optimization_inputs = model.optimization_inputs()
if not (optimization_inputs.get('indices_point_camintrinsics_camextrinsics') is None or \
        optimization_inputs['indices_point_camintrinsics_camextrinsics'].size == 0):
    print("Point observations not supported", file=sys.stderr)
    sys.exit()

observed_pixel_uncertainty = np.std(mrcal.residuals_chessboard(optimization_inputs).ravel())

if args.perfect:
    if args.model_intrinsics is not None:
        model_intrinsics = mrcal.cameramodel(args.model_intrinsics)
        if model_intrinsics.intrinsics()[0] != model.intrinsics()[0]:
            print("At this time, --model-intrinsics MUST use the same lens model as the reference model",
                  file=sys.stderr)
            sys.exit(1)
        optimization_inputs['intrinsics'][model.icam_intrinsics()] = \
            model_intrinsics.intrinsics()[1]

    mrcal.make_perfect_observations(optimization_inputs,
                                    observed_pixel_uncertainty = observed_pixel_uncertainty)

######### Reoptimize
optimization_inputs['verbose']                    = args.verbose
optimization_inputs['do_apply_outlier_rejection'] = not args.skip_outlier_rejection
if args.revive_outliers:
    observations = optimization_inputs['observations_board']

    print(f"Original solve has {np.count_nonzero(observations[...,2] <= 0)} outliers. Reviving them")
    print("")
    observations[observations[...,2] <= 0, 2] = 1.

mrcal.optimize(**optimization_inputs)

model = mrcal.cameramodel(optimization_inputs = optimization_inputs,
                          icam_intrinsics     = model.icam_intrinsics())

print("")
print("Done. The results are in the 'model' and 'optimization_inputs' variables")
print("")

import IPython
IPython.embed()
