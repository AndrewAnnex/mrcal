#!/usr/bin/python3

r'''Loads a model, generates perfect chessboard observations, corrupts them with
nominal noise, and re-solves'''

import sys
import mrcal
import numpy as np
import numpysane as nps



######### Load a model, generate perfect observations
model = mrcal.cameramodel(sys.argv[1])

optimization_inputs = model.optimization_inputs()

if not (optimization_inputs.get('indices_point_camintrinsics_camextrinsics') is None or \
        optimization_inputs['indices_point_camintrinsics_camextrinsics'].size == 0):
    print("Point observations not supported", file=sys.stderr)
    sys.exit()


# shape (Nobservations, Nheight, Nwidth, 3)
pcam = mrcal.hypothesis_board_corner_positions(**optimization_inputs)[0]

i_intrinsics = \
  optimization_inputs['indices_frame_camintrinsics_camextrinsics'][:,1]

# shape (Nobservations,1,1,Nintrinsics)
intrinsics = nps.mv(optimization_inputs['intrinsics'][i_intrinsics],-2,-4)

observations_board_perfect = \
    mrcal.project( pcam,
                   optimization_inputs['lensmodel'],
                   intrinsics )

observed_pixel_uncertainty = \
    np.std(mrcal.residuals_chessboard(optimization_inputs).ravel())

optimization_inputs['observations_board'][...,:2] = observations_board_perfect

# optimization_inputs now contains perfect, noiseless board observations
x = mrcal.optimizer_callback(**optimization_inputs)[1]
err = nps.norm2(x[:mrcal.num_measurements_boards(**optimization_inputs)])

if err > 1e-16:
    print("Perfect observations produced nonzero error. This is a bug")

######### Add perfect noise
print(f"I see observed_pixel_uncertainty = {observed_pixel_uncertainty:.2f}",
      file=sys.stderr)

noise_nominal = \
    observed_pixel_uncertainty * \
    np.random.randn(*optimization_inputs['observations_board'][...,:2].shape)

weight = nps.dummy( optimization_inputs['observations_board'][...,2],
                    axis = -1 )
weight[ weight<=0 ] = 1. # to avoid dividing by 0

optimization_inputs['observations_board'][...,:2] += \
    noise_nominal / weight

######### Reoptimize
mrcal.optimize(**optimization_inputs)

model = mrcal.cameramodel(optimization_inputs = optimization_inputs,
                          icam_intrinsics     = model.icam_intrinsics())

model.write(sys.stdout)
