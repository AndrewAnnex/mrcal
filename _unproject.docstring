Removes distortion from pixel observations

SYNOPSIS

    v = mrcal._unproject( # (N,2) array of pixel observations
                          q,
                          lens_model, intrinsics_data )

This is the internal written-in-C _unproject(). mrcal.unproject() is a python
wrapper that has a slow path to handle CAHVORE. Otherwise, the wrapper just
calls this function, which does NOT support CAHVORE

Maps a set of 2D imager points q to a 3d vector in camera coordinates that
produced these pixel observations. The 3d vector is unique only up-to-length, so
the result vectors either

- if not z1: are reported as (3,) arrays with z = 1
- if z1:     are reported as (2,) arrays, implying that z = 1

This is the "reverse" direction, so an iterative nonlinear optimization is
performed internally to compute this result. This is much slower than
mrcal_project. For OpenCV distortions specifically, OpenCV has
cvUndistortPoints() (and cv2.undistortPoints()), but these are inaccurate:
https://github.com/opencv/opencv/issues/8811

This function does NOT support CAHVORE.

ARGUMENTS

- q: array of dims (...,2); the pixel coordinates we're unprojecting. This
  supports broadcasting fully, and any leading dimensions are allowed, including
  none

- lens_model: a string such as

  LENSMODEL_PINHOLE
  LENSMODEL_OPENCV4
  LENSMODEL_OPENCV5
  LENSMODEL_OPENCV8
  LENSMODEL_OPENCV12 (if we have OpenCV >= 3.0.0)
  LENSMODEL_OPENCV14 (if we have OpenCV >= 3.1.0)
  LENSMODEL_CAHVOR

- intrinsics_data: array of dims (Nintrinsics):

    (focal_x, focal_y, center_pixel_x, center_pixel_y, distorion0, distortion1,
    ...)

  The focal lengths are given in pixels.

- z1: optional boolean that defaults to False

  if False: we return an (...,3) array of points in camera coordinates, where
  the last column (z) contains 1

  if True: we return an (...,2) array. This represents points in camera
  coordinates, where the x,y components are present in this array, and the z is
  omitted, and assumed to be 1
