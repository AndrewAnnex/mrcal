#!/usr/bin/python3

r'''Visualizes the surface represented in a splined lens model

SYNOPSIS

  $ mrcal-show-splined-model-surface cam.cameramodel
  ... a plot pops up showing the surface

Splined models are described at

  http://mrcal.secretsauce.net/lensmodels.html#splined-stereographic-lens-model

Splined models are built with a splined surface that we index to compute the
projection. The meaning of what indexes the surface and the values of the
surface varies by model, but in all cases, visualizing the surface is useful.

This tool can produce a plot in the imager domain or in the spline index domain
(normalized stereographic coordinates, usually). Both are useful. We plot in the
spline index domain by default; pass --imager-domain to make the other choice.

One use for this tool is to check that the field-of-view we're using for this
model is reasonable. We'd like the field of view to be wide-enough to cover the
whole imager, but not much wider, since representing invisible areas isn't
useful. Ideally the surface domain boundary (that this tool displays) is just
wider than the imager edges (which this tool also displays).

'''


import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--vectorfield',
                        action = 'store_true',
                        default = False,
                        help='''Display the spline correction as a vector field
                        instead of as a heat map of the deltaux or deltauy
                        components. if --vectorfield: the 'xy' argument is
                        ignored, and --imager-domain is not allowed''')

    parser.add_argument('--vectorscale',
                        type = float,
                        default = 1.0,
                        help='''If plotting a vector field, scale all the
                        vectors by this factor. Useful to improve legibility if
                        the vectors are too small to see''')

    parser.add_argument('--extratitle',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')
    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of making an interactive plot''')
    parser.add_argument('--terminal',
                        type=str,
                        help=r'''gnuplotlib terminal. The default is good almost always, so most people don't
                        need this option''')
    parser.add_argument('--set',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplotlib. Can be given multiple times''')
    parser.add_argument('--unset',
                        type=str,
                        action='append',
                        help='''Extra 'unset' directives to gnuplotlib. Can be given multiple times''')
    parser.add_argument('--imager-domain',
                        action='store_true',
                        help='''By default, this produces a visualization in the domain of the spline-index
                        (normalized stereographic coordinates). Sometimes it's
                        more informative to look at the imager domain instead,
                        by passing this option. Exclusive with --vectorfield''')
    parser.add_argument('--show-imager-bounds',
                        action='store_true',
                        help='''By default we communicate the usable projection
                        region to the user by displaying the valid-intrinsics
                        region. This isn't available in all models. To fall back
                        on the boundary of the full imager, pass
                        --show-imager-bounds. In the usual case of incomplete
                        calibration-time coverage at the edges, this results in
                        a very unrealistic representation of reality. Leaving
                        this at the default is recommended''')
    parser.add_argument('--observations',
                        action='store_true',
                        default=False,
                        help='''If given, I show where the chessboard corners were observed at calibration
                        time. This is useful to evaluate the reported unprojectable regions.''')
    parser.add_argument('model',
                        type=str,
                        help='''Input camera model. If "-' is given, we read standard input''')

    parser.add_argument('xy',
                        choices = ('x','y'),
                        default = 'x',
                        nargs   = '?',
                        help='''Optional 'x' or 'y': which surface we're looking
                        at. Ignored if --vectorfield''')

    args = parser.parse_args()

    if args.vectorfield and args.imager_domain:
        print("--vectorfield and --imager-domain are mutually exclusive", file=sys.stderr)
        sys.exit(1)

    return args

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README




import numpy as np
import numpysane as nps

import mrcal



try:
    model = mrcal.cameramodel(args.model)
except Exception as e:
    print(f"Couldn't load camera model '{args.model}': {e}", file=sys.stderr)
    sys.exit(1)
lensmodel = model.intrinsics()[0]

if not re.match('LENSMODEL_SPLINED', lensmodel):
    print(f"This only makes sense with splined models. Input uses {lensmodel}",
          file = sys.stderr)
    sys.exit(1)

if not args.show_imager_bounds and \
   model.valid_intrinsics_region() is None:
    print("The given model has no valid-intrinsics region. Pass --show-imager-bounds",
          file = sys.stderr)
    sys.exit(1)

plotkwargs = {}
if args.set is not None:
    plotkwargs['set'] = args.set
if args.unset is not None:
    plotkwargs['unset'] = args.unset

plot = mrcal.show_splined_model_surface(model, args.xy,
                                        imager_domain           = args.imager_domain,
                                        vectorfield             = args.vectorfield,
                                        vectorscale             = args.vectorscale,
                                        valid_intrinsics_region = not args.show_imager_bounds,
                                        observations            = args.observations,
                                        extratitle              = args.extratitle,
                                        hardcopy                = args.hardcopy,
                                        terminal                = args.terminal,
                                        **plotkwargs)

if args.hardcopy is None:
    plot.wait()
