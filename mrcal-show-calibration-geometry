#!/usr/bin/python3

r'''Shows the calibration geometry defined by the camera extrinsics

SYNOPSIS

  $ mrcal-show-calibration-geometry *.cameramodel
  ... a plot pops up showing the camera arrangement

This allows us to visualize the relative geometry between several cameras

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--scale-axes',
                        type=float,
                        default = 1.0,
                        help='''Scale for the camera axes. By default these are 1.0m long''')
    parser.add_argument('--title',
                        type=str,
                        default = None,
                        help='''Title string for the plot''')
    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of making an interactive plot''')

    parser.add_argument('--transforms',
                        type=str,
                        help='''Optional transforms.txt. This is a legacy file representing an extra
                        transformation for each camera. Most usages will omit
                        this''')

    parser.add_argument('models',
                        type = str,
                        nargs= '+',
                        help='''Camera models to visualize. Any N cameras can be given''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README




import numpy as np
import numpysane as nps

import mrcal




models = [mrcal.cameramodel(m) for m in args.models]

cameras_Rt_plot_ref = None
if args.transforms is not None:
    import mrcal.cahvor
    transforms = mrcal.cahvor.read_transforms(args.transforms)

    def get_pair(icam):
        f = args.models[icam]
        m = re.search("camera([0-9]+)", f)
        return int(m.group(1))
    def Rt_plot_ref(icam):
        try:
            pair = get_pair(icam)
            Rt_ins_ref = transforms['ins_from_camera'][pair]
            return Rt_ins_ref
        except:
            return None
    cameras_Rt_plot_ref = [ Rt_plot_ref(icam) for icam in range(len(models))]

plotkwargs = {}
if args.title    is not None: plotkwargs['title'   ] = args.title
if args.hardcopy is not None: plotkwargs['hardcopy'] = args.hardcopy

plot = mrcal.show_calibration_geometry(models,
                                       args.models,
                                       cameras_Rt_plot_ref,
                                       **plotkwargs)

if args.hardcopy is None:
    plot.wait()
