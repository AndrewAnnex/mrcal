#!/usr/bin/python2

r'''Renders a difference in projection between two models

Synopsis:

  $ show-intrinsics-diff before.cameramodel after.cameramodel
  ... a plot pops up showing how two models differ in their projections


If we're given exactly 2 models then I can either show a vector field of a heat
map of the differences. I N > 2 then a vector field isn't possible and we show a
heat map of the standard deviation of the differences. Note that for N=2 the
difference shows in a-b, which is NOT the standard deviation (that is (a-b)/2).
I use the standard deviation for N > 2

This routine fits the implied camera rotation to align the models as much as
possible. This is required because a camera pitch/yaw motion looks a lot like a
shift in the camera optical axis (cx,cy). So I could be comparing two sets of
intrinsics that both represent the same lens faithfully, but imply different
rotations: the rotation would be compensated for by a shift in cx,cy. If I
compare the two sets of intrinsics by IGNORING rotations, I would get a large
diff because of the cx,cy difference.


In all 3 cases I try to find the largest matching region around the area of
interest. So the recommentation is to specify where['center'], but to omit
where['radius'].

'''

import sys
import argparse
import os
import re

import mrcal.cahvor
import mrcal


def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--gridn',
                        type=int,
                        default = (60,40),
                        nargs = 2,
                        help='''How densely we should sample the imager. By default we report a 60x40 grid''')
    parser.add_argument('--where',
                        type=float,
                        nargs=2,
                        help='''Center of the region of interest for this diff. It is usually impossible for
                        the models to match everywhere, but focusing on a
                        particular area can work better. The implied rotation
                        will be fit to match as large as possible an area
                        centered on this argument. If omitted, we will focus on
                        the center of the imager''')
    parser.add_argument('--radius',
                        type=float,
                        default=1.0e6,
                        help='''Radius of the region of interest. If<=0, we do NOT fit an implied rotation at
                        all. If omitted, we use a very large radius: we use data
                        across the WHOLE imager for the fit''')

    parser.add_argument('--cbmax',
                        type=float,
                        default=10,
                        help='''Maximum range of the colorbar''')

    parser.add_argument('--extratitle',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')

    parser.add_argument('--vectorfield',
                        action = 'store_true',
                        default = False,
                        help='''Plot the diff as a vector field instead of as a heat map. The vector field
                        contains more information (magnitude AND direction), but
                        is less clear at a glance''')

    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of making an interactive plot''')
    parser.add_argument('--extraset',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplot. Can be given multiple times''')

    parser.add_argument('models',
                        type=lambda f: f if os.path.isfile(f) else \
                                parser.error("The cameramodel must be an existing readable file, but got '{}'".format(f)),
                        nargs='+',
                        help='''Camera models to diff''')

    args = parser.parse_args()

    if len(args.models) < 2:
        raise Exception("I need at least two models to diff. Instead got this: {}".format(args.models))

    return args



args = parse_args()

plotkwargs_extra = {}
if args.extraset is not None:
    plotkwargs_extra['set'] = args.extraset

def loadmodel(m):
    if re.match(".*\.cahvor$", m): return mrcal.cahvor.read(m)
    else:                          return mrcal.cameramodel(m)

models = [loadmodel(modelfilename) for modelfilename in args.models]

plot = mrcal.show_intrinsics_diff(models,
                                  args.gridn[0], args.gridn[1],
                                  focus_center    = args.where,
                                  focus_radius    = args.radius,
                                  vectorfield     = args.vectorfield,
                                  hardcopy        = args.hardcopy,
                                  cbmax           = args.cbmax,
                                  extratitle      = args.extratitle,
                                  kwargs          = plotkwargs_extra)
if args.hardcopy is None:
    plot.wait()

