#!/usr/bin/python3

r'''Visualize the valid-intrinsics region

SYNOPSIS

  $ mrcal-show-valid-intrinsics-region --writeimage --image image.png left.cameramodel
  Wrote image-valid-intrinsics-region.png

Given a camera model, this tool renders the valid-intrinsics region. If an image
is given, the region is rendered overlaid onto the image.

Without --writeimage we make a plot with gnuplot. If --points then we also read
x,y points from STDIN, and plot those.

With --writeimage, the output is another IMAGE instead of a plot. We don't plot
points from STDIN in this case

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--writeimage',
                        action='store_true',
                        help='''By default I make a plot. If --writeimage is given, I output an annotated
                        image instead''')
    parser.add_argument('--points',
                        action='store_true',
                        help='''If given, I read a set of xy points from STDIN, and include them in the plot.
                        This applies ONLY if not --writeimage''')
    parser.add_argument('--title',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')
    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of making an interactive plot''')
    parser.add_argument('--extraset',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplot. Can be given multiple times''')
    parser.add_argument('--image',
                        type=str,
                        required = False,
                        help='''Image to annotate''')
    parser.add_argument('model',
                        type=str,
                        nargs='+',
                        help='''Input camera model(s)''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README


if args.writeimage:
    if args.image is None:
        raise Exception("--writeimage NEEDS an image to annotate")

    if args.title    is not None or \
       args.hardcopy is not None or \
       args.extraset is not None:
        raise Exception("--title and --hardcopy and --extraset are only valid without --writeimage")

    if args.points and args.writeimage:
        raise Exception("Currently --points is implemented ONLY if not --writeimage")




import mrcal
import numpy as np

models = [mrcal.cameramodel(m) for m in args.model]

if any( m.valid_intrinsics_region() is None for m in models ):
    raise Exception("Not all given models have a valid-intrinsics contour! Giving up")

if args.writeimage:

    import cv2

    def target_image_filename(f):
        m = re.match("(.*)\.([a-z][a-z][a-z])$", f, flags=re.I)
        if not m:
            raise Exception("imagefile must end in .xxx where 'xxx' is some image extension. Instead got '{}'".format(imagefile))

        return "{}-valid-intrinsics-region.{}".format(m.group(1),m.group(2))

    imagefile_out = target_image_filename(args.image)
    image_out = cv2.imread(args.image)
    for m in models:
        mrcal.annotate_image__valid_intrinsics_region(m, image_out)
    cv2.imwrite(imagefile_out, image_out)
    sys.stderr.write("Wrote {}\n".format(imagefile_out))

else:

    points = None
    if args.points:
        points = np.loadtxt(sys.stdin)

    plotkwargs_extra = {}
    if args.extraset is not None:
        plotkwargs_extra['set'] = args.extraset

    plot = mrcal.show_valid_intrinsics_region( \
               models, args.image,
               points = points,
               hardcopy = args.hardcopy,
               title    = args.title,
               kwargs   = plotkwargs_extra)

    if args.hardcopy is None:
        plot.wait()
