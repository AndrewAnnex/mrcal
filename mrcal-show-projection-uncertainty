#!/usr/bin/python3

r'''Visualize the expected projection error due to uncertainty in the calibration-time input

SYNOPSIS

  $ mrcal-show-projection-uncertainty left.cameramodel
  ... a plot pops up showing the projection uncertainty of the intrinsics in
  ... this model


A calibration process produces the best-fitting camera parameters and the
uncertainty in these parameters. This tool examines the uncertainty in the
intrinsics. The intrinsics are used to project points in space to pixel
coordinates on the image plane. Thus the uncertainty in the intrinsics can be
translated to uncertainty in projection. This tool plots the expected value of
this projection error across the imager. Areas with a high expected projection
error are unreliable for further work.

See mrcal.projection_uncertainty() for a full description of the computation
performed here

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--observations-xydist',
                        action='store_true',
                        default=False,
                        help='''If given, I make a 3D plot of uncertainties and chessboard observations. With
                        this option I ignore --distance, --isotropic,
                        --observations. This option makes a 3D x-y-distance plot
                        instead of the 2D uncertainty contours we get
                        normally''')
    parser.add_argument('--gridn',
                        type=int,
                        default = (60,40),
                        nargs = 2,
                        help='''How densely we should sample the imager. By default we use a 60x40 grid (or a
                        (15,10) grid if --observations-xydist)''')
    parser.add_argument('--distance',
                        type=float,
                        help='''By default we display the projection uncertainty infinitely away from the
                        camera. If we want to look closer in, the desired
                        observation distance can be given in this argument''')
    parser.add_argument('--isotropic',
                        action='store_true',
                        default=False,
                        help='''By default I display the expected value of the projection error in the worst
                        possible direction of this error. If we want to plot the
                        RMS of the worst and best directions, pass --isotropic.
                        If we assume the errors will apply evenly in all
                        directions, then we can use this metric, which is
                        potentially easier to compute''')
    parser.add_argument('--observations',
                        action='store_true',
                        default=False,
                        help='''If given, I show where the chessboard corners were observed at calibration
                        time. This should correspond to the low-uncertainty
                        regions.''')
    parser.add_argument('--cbmax',
                        type=float,
                        default=3,
                        help='''Maximum range of the colorbar''')
    parser.add_argument('--extratitle',
                        type=str,
                        default = None,
                        help='''Extra title string for the plot''')

    parser.add_argument('--hardcopy',
                        type=str,
                        help='''Write the output to disk, instead of an interactive plot''')
    parser.add_argument('--extraset',
                        type=str,
                        action='append',
                        help='''Extra 'set' directives to gnuplot. Can be given multiple times''')

    parser.add_argument('model',
                        type=str,
                        help='''Input camera model. If "-' is given, we read standard input''')

    return parser.parse_args()

args  = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README




import mrcal

plotkwargs_extra = {}
if args.extraset is not None:
    plotkwargs_extra['set'] = args.extraset

model = mrcal.cameramodel(args.model)

if not args.observations_xydist:
    plot = mrcal.show_projection_uncertainty(model,
                                             args.gridn[0], args.gridn[1],
                                             distance     = args.distance,
                                             isotropic    = args.isotropic,
                                             observations = args.observations,
                                             hardcopy     = args.hardcopy,
                                             cbmax        = args.cbmax,
                                             extratitle   = args.extratitle,
                                             **plotkwargs_extra)
else:
    plot = mrcal.show_projection_uncertainty_xydist(model,
                                                    args.gridn[0] // 4,
                                                    args.gridn[1] // 4,
                                                    hardcopy     = args.hardcopy,
                                                    cbmax        = args.cbmax,
                                                    extratitle   = args.extratitle,
                                                    **plotkwargs_extra)

if args.hardcopy is None:
    plot.wait()
