#!/usr/bin/python3

r'''Reprojects pixel observations from one model to another

SYNOPSIS

  $ mrcal-reproject-points
      from.cameramodel to.cameramodel
      < input.vnl > output.vnl

This tool takes a set of pixel observations of world points captured by one
camera model, and transforms them into observations of the same points made by
another model. This is similar to mrcal-reproject-image, but acts on discrete
points, rather than a whole image. The two sets of intrinsics are always used.
The translation component of the extrinsics is always ignored; the rotation is
ignored as well if --ignore-rotation.

This allows one to combine multiple image-processing techniques that expect
different projections.

The input data comes in on standard input, and the output data goes out on
standard output. Both are vnlog data: human-readable text with 2 columns: x and
y pixel coords. Comments are allowed, and start with the '#' character.

'''

from __future__ import print_function

import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--ignore-rotation',
                        action='store_true',
                        help='''By default the relative camera rotation is used in the transformation. If we
                        want to use the intrinsics ONLY, pass
                        --ignore-rotation''')

    parser.add_argument('model-from',
                        type=str,
                        help='''Camera model for the input points. Assumed to be mrcal native, Unless the
                        name is xxx.cahvor, in which case the cahvor format is
                        used.''')

    parser.add_argument('model-to',
                        type=str,
                        help='''Camera model for the output points. Assumed to be mrcal native, Unless the
                        name is xxx.cahvor, in which case the cahvor format is
                        assumed''')

    return parser.parse_args()

args = parse_args()

# arg-parsing is done before the imports so that --help works without building
# stuff, so that I can generate the manpages and README





import numpy as np
import numpysane as nps

import mrcal

model_from = mrcal.cameramodel(getattr(args, 'model-from'))
model_to   = mrcal.cameramodel(getattr(args, 'model-to'))


p = nps.atleast_dims(np.genfromtxt(sys.stdin), -2)

v = mrcal.unproject(p, *model_from.intrinsics())

if not args.ignore_rotation:
    R = nps.matmult( model_to.  extrinsics_Rt_fromref()[:3,:],
                     model_from.extrinsics_Rt_toref  ()[:3,:] )
    v = nps.matmult(R, nps.dummy(v, -1))[..., 0]

p = mrcal.project  (v, *model_to  .intrinsics())
np.savetxt(sys.stdout, p, fmt='%f', header='x y')
